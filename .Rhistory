paste0("Votes_",2:4)
paste0("Votes_",2:4)[-1]
covid_ann3$shifted_Votes_2 == "unassigned"
flag <- covid_ann3$shifted_Votes_2 == "unassigned"
table(flag)
table(covid_ann3$shifted_Votes_2)
table(flag)
flag <- covid_ann3$shifted_Votes_2 == "unassigned"
rm(flag)
flag <- covid_ann3$shifted_Votes_2 == "unassigned"
flag & (covid_ann3$Votes_2 == "unassigned")
flag & (covid_ann3$Votes_2 == "unassigned") |> table()
(flag & (covid_ann3$Votes_2 == "unassigned")) |> table()
table(covid_ann3$Votes_2)
(flag & (covid_ann3$Votes_2 == "unassigned")) |> table()
flag & (covid_ann3$Votes_2 == "unassigned")
flag <- flag & (covid_ann3$Votes_2 == "unassigned")
table(flag)
rm(flag)
source("/stornext/Bioinf/data/lab_davis/chen.j/Packages/Spatial_Annotation/assemble.R", echo=TRUE)
source("/stornext/Bioinf/data/lab_davis/chen.j/Packages/Spatial_Annotation/assemble.R", echo=TRUE)
covid@colData
covid@colData[,36]
covid@colData[,1:34]
covid@colData[,1:32]
covid@colData[,1:31]
covid_ann3@colData[,1:31]
covid_ann2@colData[,1:31]
covid_ann2@colData[,1:32]
covid_ann3@colData[,1:32]
covid@colData[,1:31]
covid@colData[,1:31]->covid@colData
View(covid)
covid$Votes_2_level_2 <- covid_ann2$Votes_2
View(covid_ann2)
table(covid_ann2$Votes_2)
covid$Votes_2_level_3 <- covid_ann3$shifted_Votes_2
table(covid$Votes_2_level_3)
table(covid$Votes_2_level_2)
merge_hierarchical(covid, idx = paste0("Votes_2_level_",3:2))
merge_hierarchical(covid, idx = paste0("Votes_2_level_",3:2))->covid
View(covid)
table(covid$merged_level)
table(covid$merged_ann)
table(covid$merged_ann) |> length()
table(covid$merged_ann)/ncol(covid)
table(covid$merged_level)
table(covid$merged_level)/ncol(covid)
table(covid_ann3$shifted_Votes_2)/ncol(covid)
85-64
table(covid$merged_level)/ncol(covid)
merge_votes_2 |> table()
merge_votes_2 <- ifelse(covid_ann3$shifted_Votes_2 != "unassigned", covid_ann3$shifted_Votes_2,
ifelse(covid_ann2$Votes_2 != "unassigned", covid_ann2$Votes_2, "unassigned"))
all(merge_votes_2 == covid$merged_ann)
saveRDS(covid, file = "/stornext/General/data/academic/grp_cosmxsmi/2021_SMI_FFPE_dataset/Spatial_Annotation/data/COVID_SMI/Merged_ann_levels/el3_qc_scran_SCT_merge_ann_4methods.rds")
colnames(colData(covid_ann3))
colnames(colData(covid_ann3))[32:37]
colnames(colData(covid_ann3))[c(32:33,35:37)]
colnames(colData(covid_ann3))[c(32:33,35:37)]->methods
covid_ann2 <- assemble(covid_ann2, idx = methods)
covid_ann3 <- assemble(covid_ann3, idx = methods)
View(covid_ann3)
View(covid_ann2)
table(covid_ann2$Votes_2)
covid@colData
covid@colData$Votes_2_level_2 <- gsub(".*\\|.*", "unassigned", covid_ann2$Votes_2)
table(covid$Votes_2_level_2)
covid@colData$Votes_2_level_3 <- gsub(".*\\|.*", "unassigned", covid_ann3$Votes_2)
table(covid$Votes_2_level_3)
all(covid$Votes_2_level_3 == covid_ann3$shifted_Votes_2)
mean(covid$Votes_2_level_3 == covid_ann3$shifted_Votes_2)
table(covid$Votes_2_level_3)/ncol(covid)
table(covid$Votes_2_level_2)/ncol(covid)
covid <- merge_hierarchical(covid, idx = paste0("Votes_2_level_",3:2))
table(covid$merged_ann)/ncol(covid)
table(covid$merged_level)
saveRDS(covid, file = "/stornext/General/data/academic/grp_cosmxsmi/2021_SMI_FFPE_dataset/Spatial_Annotation/data/COVID_SMI/Merged_ann_levels/el3_qc_scran_SCT_merge_ann_5methods.rds")
saveRDS(covid, file = "/stornext/General/data/academic/grp_cosmxsmi/2021_SMI_FFPE_dataset/Spatial_Annotation/data/COVID_SMI/Merged_ann_levels/el3_qc_scran_SCT_merge_ann_5methods.rds")
LM7
LM22
source("/stornext/Bioinf/data/lab_davis/chen.j/Packages/TILsignaturesScreen_old/R/assign_from_sig_mat.R", echo=TRUE)
sig_mat <- read.table("../../scRNA_lung/CIBERSORTx/HLCA_sub_counts_952genes_ann2/CIBERSORTx_HLCA_sub_counts_952genes_ann2_inferred_phenoclasses.CIBERSORTx_HLCA_sub_counts_952genes_ann2_inferred_refsample.bm.K999.txt", header = T, row.names = 1, sep = "\t")
head(sig_mat)
assign_from_sig_mat(sig_mat)
library(magrittr)
assign_from_sig_mat(sig_mat) |> reshape2::melt() %>%
split(.$value, .$L1) %>%
lapply(., function(x) paste(x$L1, collapse = ", ")) %>%
reshape2::melt()
assign_from_sig_mat(sig_mat) |> reshape2::melt() %>%
split(.$value, .$L1) %>%
lapply(., function(x) paste(x$L1, collapse = ", ")) %>%
reshape2::melt() -> m_table
colnames(m_table)
colnames(m_table) <- c("Markers", "Label")
head(m)
-
head(m_table)
colnames(m_table) <- c("Label", "Markers")
head(m_table)
assign_from_sig_mat(sig_mat) |> reshape2::melt() %>%
split(.$L1, .$value) %>%
lapply(., function(x) paste(x$L1, collapse = ", ")) %>%
reshape2::melt() -> m_table
head(m_table)
assign_from_sig_mat(sig_mat) |> lapply(function(x) paste(x, collapse = ", ")) |>
reshape2::melt() -> m_table
head(m_table)
colnames(m_table)
colnames(m_table) <- c("Markers", "Label")
head(m_table)
sig_mat <- read.table("../../scRNA_lung/CIBERSORTx/HLCA_sub_counts_952genes_ann1/CIBERSORTx_HLCA_sub_counts_952genes_ann1_inferred_phenoclasses.CIBERSORTx_HLCA_sub_counts_952genes_ann1_inferred_refsample.bm.K999.txt", header = T, row.names = 1, sep = "\t")
head(sig_mat)
assign_from_sig_mat(sig_mat) |> lapply(function(x) paste(x, collapse = ", ")) |>
reshape2::melt() -> m_table_1
head(m_table_1)
colnames(m_table_1) <- c("Markers", "Label")
head(m_table_1)
openxlsx::write.xlsx(list(HLCA_952genes_ann_1 = m_table_1,
HLCA_952genes_ann_2 = m_table),
file = "../../../SMI_Cell_Annotation/Data/Markers/Markers_List_CIBERSORTx_HLCA_HDBSCAN_ann.xlsx", colNames = T)
rm(m_table)
rm(m_table_1)
rm(sig_mat)
gc()
rm(list = paste0("covid_ann",1:3))
rm(covid)
gc()
covid <- readr::read_rds("/stornext/General/data/academic/grp_cosmxsmi/2021_SMI_FFPE_dataset/Spatial_Annotation/data/COVID_SMI/COVID_only/el3_COVIDonly_qc_raw_logCPM.rds")
View(covid)
rm(covid)
gc()
plot(1,1)
plot(1,1) |> class()
expect_silent(plot(1,1))
expect_null(plot(1,1))
p <- function() plot(1,1)
p
p()
p()
expect(p())
expect_silent(p())
BiocParallel::bpap
.libPaths()
system("which R")
covid_ann2 <- readr::rad_rd
covid_ann2 <- readr::rad_rds("/stornext/General/data/academic/grp_cosmxsmi/2021_SMI_FFPE_dataset/Spatial_Annotation/data/COVID_SMI/COVID_only/el3_qc_COVIDonly_scran_SCT_ann2.rds")
covid_ann2 <- readr::read_rds("/stornext/General/data/academic/grp_cosmxsmi/2021_SMI_FFPE_dataset/Spatial_Annotation/data/COVID_SMI/COVID_only/el3_qc_COVIDonly_scran_SCT_ann2.rds")
covid_ann3 <- readr::read_rds("/stornext/General/data/academic/grp_cosmxsmi/2021_SMI_FFPE_dataset/Spatial_Annotation/data/COVID_SMI/COVID_only/el3_qc_COVIDonly_scran_SCT_ann3.rds")
covid <- covid_ann2
View(covid)
covid@colData[,32]
covid@colData[,31]
covid@colData[,30]
covid@colData |> colnames()
covid@colData[,29]
covid@colData[,30]
covid@colData <- covid@colData[,1:29]
table(covid_ann2@colData$Votes_2)
covid@colData$Votes_2_ann_2 <- gsub(".*\\|.*", "unassigned", covid_ann2@colData$Votes_2)
table(covid@colData$Votes_2_ann_2)
covid@colData$Votes_2_ann_3 <- gsub(".*\\|.*", "unassigned", covid_ann3@colData$Votes_2)
table(covid@colData$Votes_2_ann_3)
covid <- merge_hierarchical(covid, idx = paste0("Votes_2_ann_", 3:2))
table(covid@colData$merged_ann)
table(covid@colData$merged_ann)/ncol(covid)
table(covid@colData$Votes_2_ann_2)/ncol(covid)
table(covid@colData$Votes_2_ann_3)/ncol(covid)
table(covid@colData$merged_ann)/ncol(covid)
saveRDS(covid, file = "/stornext/General/data/academic/grp_cosmxsmi/2021_SMI_FFPE_dataset/Spatial_Annotation/data/COVID_SMI/COVID_only/Merged_ann_levels/el3_qc_COVIDonly_scran_SCT_merge_ann_4methods.rds")
View(covid)
covid@colData
head(covid@colData)
table(covid@colData$merge_level)
table(covid@colData$merged_level)
table(covid$@colData$merged-ann
document()
check()
use_package("methods")
use_package("RobustRankAggreg")
check()
class(CCLE)
tidyr::pivot_wider(data.frame(a=1:10,b=rep(letters[1:2],5)))
tidyr::pivot_wider(data.frame(a=1:10,b=rep(letters[1:2],5)), names_from = "b", values_from = "a")
tidyr::pivot_wider(data.frame(a=1:10,b=rep(letters[1:2],5),c=1:10), names_from = "b", values_from = "a")
tidyr::pivot_wider(data.frame(a=1:10,b=rep(letters[1:2],5),c=1:10), names_from = "b", values_from = "a") |> rownames()
tidyr::pivot_wider(data.frame(a=1:10,b=rep(letters[1:2],5),c=1:10), names_from = "b", values_from = "a") |> class()
tidyr::pivot_wider(data.frame(a=1:10,b=rep(letters[1:2],5),c=1:10), names_from = "b", values_from = "a") |> tibble::column_to_rownames(var = "c")
tidyr::pivot_wider(data.frame(a=1:10,b=rep(letters[1:2],5),c=1:10), names_from = "b", values_from = "a") |> tibble::column_to_rownames(var = "c") |> class()
tidyr::pivot_wider(data.frame(a=1:10,b=rep(letters[1:2],5),c=1:10), names_from = "b", values_from = "a") |> class()
tidyr::pivot_wider(data.frame(a=1:10,b=rep(letters[1:2],5),c=1:10), names_from = "b", values_from = "a") |> as.data.frame()
tidyr::pivot_wider(data.frame(a=1:10,b=rep(letters[1:2],5),c=1:10), names_from = "b", values_from = "a") |> data.frame()
tidyr::pivot_wider(data.frame(a=1:10,b=rep(letters[1:2],5),c=1:10), names_from = "b", values_from = "a") |> data.frame() |> class()
tidyr::pivot_wider(data.frame(a=1:10,b=rep(letters[1:2],5),c=1:10), names_from = "b", values_from = "a") |> data.frame() |> (\(x) x$c)()
check()
check()
assign("tmp", vis_data, envir = .GlobalEnv)
tmp
rm(tmp)
document()
check()
document()
check()
?TILsignaturesScreen::filter_subset_sig()
library(TILsignaturesScreen)
filter_subset_sig(
data = list(A = im_data_6, B = im_data_6),
markers = geneIds(Markers),
ID = "celltype:ch1",
type = "NK",
gene_id = "ENSEMBL",
comb = "RRA",  ## change this to use different strategy, default is "union"
s_thres = 0.1  ## only work when comb = "RRA", set a threshold for ranking score
)
filter_subset_sig(
data = list(A = im_data_6, B = im_data_6),
markers = geneIds(Markers),
ID = "celltype:ch1",
type = "NK",
gene_id = "ENSEMBL"
# comb = "RRA",  ## change this to use different strategy, default is "union"
# s_thres = 0.1  ## only work when comb = "RRA", set a threshold for ranking score
)
filter_subset_sig(
data = list(A = im_data_6, B = im_data_6),
markers = geneIds(Markers),
ID = "celltype:ch1",
type = "NK",
gene_id = "ENSEMBL",
comb = "RRA",  ## change this to use different strategy, default is "union"
s_thres = 0.05  ## only work when comb = "RRA", set a threshold for ranking score
)
filter_subset_sig(
data = list(A = im_data_6, B = im_data_6),
markers = geneIds(Markers),
ID = "celltype:ch1",
type = "NK",
gene_id = "ENSEMBL",
comb = "RRA",  ## change this to use different strategy, default is "union"
s_thres = 0.5  ## only work when comb = "RRA", set a threshold for ranking score
)
filter_subset_sig(
data = list(A = im_data_6, B = im_data_6),
markers = geneIds(Markers),
ID = "celltype:ch1",
type = "NK",
gene_id = "ENSEMBL", comb = "intersect"
)
filter_subset_sig(
data = list(A = im_data_6, B = im_data_6),
markers = geneIds(Markers),
ID = "celltype:ch1",
type = "NK",
gene_id = "ENSEMBL",
comb = "RRA",  ## change this to use different strategy, default is "union"
s_thres = 1  ## only work when comb = "RRA", set a threshold for ranking score
)
filter_subset_sig(
data = list(A = im_data_6, B = im_data_6),
markers = geneIds(Markers),
ID = "celltype:ch1",
type = "NK",
gene_id = "ENSEMBL",
comb = "RRA",  ## change this to use different strategy, default is "union"
s_thres = 0.5  ## only work when comb = "RRA", set a threshold for ranking score
)
document()
check()
BiocCheck::BiocCheck()
sapply(1:4, function(x) c(x,x**2))
vapply(1:4, function(x) c(x,x**2))
?vapply()
vapply(1:4, function(x) c(x,x**2), FUN.VALUE = "vector")
vapply(1:4, function(x) c(x,x**2), FUN.VALUE = "array")
sapply(3:9, seq)
seq(3:9)
fivenum(1:3)
fivenum(1:10)
vapply(1:4, function(x) c(x,x**2), FUN.VALUE = c(a=1))
vapply(1:4, function(x) c(x,x**2), FUN.VALUE = c(a=1,b=1))
vapply(1:4, function(x) c(x,x**2), FUN.VALUE = c(a=0,b=0))
sapply(1:4, function(x) c(x,x**2))
sapply(1:4, function(x) is.numeric)
sapply(1:4, is.numeric)
vapply(1:4, is.numeric, )
vapply(1:4, is.numeric)
vapply(1:4, is.numeric, c(a=0))
vapply(1:4, is.numeric, c(a="1"))
vapply(1:4, is.numeric, c(a=3))
vapply(1:4, is.numeric, c(a=TRUE))
vapply(1:4, is.numeric, c(a=FALSE))
vapply(1:4, is.numeric, c(a=FALSE)) |> names()
check()
BiocCheck::BiocCheck()
check()
check()
check()
check()
BiocCheck::BiocCheck()
devtools::load_all()
seq_len(10)
document()
BiocCheck::BiocCheck()
document()
BiocCheck::BiocCheck()
check()
library(devtools)
BiocCheck::BiocCheck()
ls()
geneIds(LM)
geneIds(LM)["LM7"]
geneIds(LM)[-"LM7"]
geneIds(LM)[-"L22"]
geneIds(LM)[-length(LM)]
which(names(LM) == "LM7")
geneIds(LM)[which(names(LM) != "LM7")]
geneIds(LM)[which(names(LM) != "L22")]
document()
check()
check()
document()
check()
document()
document()
check()
BiocCheck::BiocCheck()
load_all()
get_de_table(im_data_6,"celltype:ch1","NK")
get_de_table(im_data_6,"celltype:ch1","NK")$`NK-CD8`
get_de_table(im_data_6,"celltype:ch1","NK")$`NK-CD8`[1:10,]
get_de_table(im_data_6,"celltype:ch1","NK")$`NK-CD8`$adj.P.Val |> rank()
get_de_table(im_data_6,"celltype:ch1","NK")$`NK-CD8`$adj.P.Val |> rank() |> head()
library(TILsignaturesScreen)
deg_tables <- TILsignaturesScreen::get_de_table(
data = im_data_6,
ID = "celltype:ch1",
type = "NK"
)
intersect(mapIds(org.Hs.eg.db, rownames(deg_tables$`NK-CD8`)[1:200],
"SYMBOL", "ENSEMBL"),
Markers)
deg_tables$`NK-CD8`
rownames(deg_tables$`NK-CD8`)
mapIds(org.Hs.eg.db, rownames(deg_tables$`NK-CD8`)[1:200],
"SYMBOL", "ENSEMBL")
Markers
intersect(mapIds(org.Hs.eg.db, rownames(deg_tables$`NK-CD8`)[1:200],
"SYMBOL", "ENSEMBL"),
geneIds(Markers))
check()
BiocCheck::BiocCheck()
gc()
View(covid)
source("../Spatial_Annotation/plot.R")
plot_sankey(colData(covid)[,paste0("Votes_2_ann_",3:2)], label = T)
library(ggalluvial)
plot_sankey(colData(covid)[,paste0("Votes_2_ann_",3:2)], label = T)
plot_sankey(colData(covid)[,paste0("Votes_2_ann_",2:3)], label = T)
covid@int_colData
??runPCA
View(covid_ann3)
plot_sankey(colData(covid_ann2)[,c("Azimuth","CelliD_ref","CHETAH","singscore","CelliD_marker","AUCell")], label = T)
table(covid_ann2@colData$CHETAH)
plot_sankey(colData(covid_ann2)[,c("Azimuth","CelliD_ref","CHETAH","singscore","CelliD_marker","AUCell")], label = T)
plot_sankey(colData(covid_ann2)[,c("Azimuth","CelliD_ref","singscore","CelliD_marker","AUCell")], label = T)
plot_sankey(colData(covid_ann3)[,c("Azimuth","CelliD_ref","singscore","CelliD_marker","AUCell")], label = T)
heatmap_overlap(colData(covid_ann3)[,c("Azimuth","CelliD_ref","singscore","CelliD_marker","AUCell")])
heatmap_overlap()
heatmap_overlap
heatmap_overlap(colData(covid_ann3)[,c("Azimuth","CelliD_ref","singscore","CelliD_marker","AUCell")], facet = "Method")
heatmap_overlap(colData(covid_ann2)[,c("Azimuth","CelliD_ref","singscore","CelliD_marker","AUCell")], facet = "Method")
testthat::test_check()
testthat::test_check(.)
testthat::test_check(".")
testthat::test_local()
## test Expression object
DEGs <- get_degs(im_data_6, ID = "celltype:ch1", type = "NK")
DEGs
View(DEGs)
View(design)
View(DEGs)
DEGs$UP
DEGs$DOWN
DEGs$proc_data
DEGs
View(DEGs)
str(DEGs)
expect_identical(names(DEGs), c("UP", "DOWN", "proc_data"))
DEGs$proc_data
data
## test DGEList object
data <- DEGs$proc_data
View(data)
View(DEGs)
View(data)
data
data |> class()
View(data)
view(data)
data$counts
get_degs(data, ID = "celltype.ch1",
type = "NK", counts = FALSE)
load_all()
get_degs(data, ID = "celltype.ch1",
type = "NK", counts = FALSE)
## test Expression object
DEGs <- get_degs(im_data_6, ID = "celltype:ch1", type = "NK")
View(DEGs)
class(DEGs)
length(DEGs)
lengths(DEGs)
DEGs
get_degs(data, ID = "celltype.ch1",
type = "NK", counts = FALSE)
get_degs(DEGs$proc_data, ID = "celltype.ch1",
type = "NK", counts = FALSE)
get_degs(DEGs$proc_data, ID = "celltype.ch1",
type = "NK", counts = FALSE)
DEGs$proc_data$samples$celltype.ch1
get_degs(DEGs$proc_data, ID = "celltype.ch1",
type = "NK", counts = FALSE)
ls()
get_degs(DEGs$proc_data, ID = "celltype.ch1",
type = "NK", counts = FALSE)
get_degs(DEGs$proc_data, ID = "celltype.ch1",
type = "NK", counts = FALSE)
q
q()
quit
quit()
get_degs(DEGs$proc_data, ID = "celltype.ch1",
type = "NK", counts = FALSE)
get_degs(DEGs$proc_data, ID = "celltype.ch1",
type = "NK", counts = FALSE)
data$counts
data$samples$norm.factors
View(design)
pacman -Qm
View(DEGs)
View(deg_tables)
View(deg_tables)
.rs.restartR()
View(DEGs)
View(design)
get_degs(data, ID = "celltype.ch1",
type = "NK", counts = FALSE)
load_all()
get_degs(data, ID = "celltype.ch1",
type = "NK", counts = FALSE)
View(data)
View(DEGs)
devtools::check()
sig_boxplot(
data = im_data_6, sigs = NK_markers$HGNC_Symbol,
ID = "celltype:ch1", type = "NK",
gene_id = "ENSEMBL"
)
devtools::load_all()
sig_boxplot(
data = im_data_6, sigs = NK_markers$HGNC_Symbol,
ID = "celltype:ch1", type = "NK",
gene_id = "ENSEMBL"
)
devtools::test()
devtools::run_examples()
rlang::last_error()
rlang::last_trace()
sig_boxplot(
data = im_data_6, sigs = NK_markers$HGNC_Symbol,
ID = "celltype:ch1", type = "NK",
gene_id = "ENSEMBL"
)
devtools::load_all()
sig_boxplot(
data = im_data_6, sigs = NK_markers$HGNC_Symbol,
ID = "celltype:ch1", type = "NK",
gene_id = "ENSEMBL"
)
devtools::run_examples()
devtools::check()
BiocCheck::BiocCheck()
sig_boxplot(
im_data_6, sigs = NK_markers$HGNC_Symbol[1:30],
ID = "celltype:ch1", type = "NK",
plot.score = FALSE,
gene_id = "ENSEMBL"
)
devtools::load_all()
sig_boxplot(
im_data_6, sigs = NK_markers$HGNC_Symbol[1:30],
ID = "celltype:ch1", type = "NK",
plot.score = FALSE,
gene_id = "ENSEMBL"
)
sig_boxplot(
im_data_6, sigs = NK_markers$HGNC_Symbol[1:30],
ID = "celltype:ch1", type = "NK",
plot.score = TRUE,
gene_id = "ENSEMBL"
)
devtools::run_examples()
rlang::last_error()
devtools::run_examples()
devtools::check()
devtools::document()
mapIds(org.Hs.eg.db, letters[1:10], "SYMBOL","SYMBOL")
mapIds(org.Hs.eg.db, NK_markers$HGNC_Symbol[1:10], "SYMBOL","SYMBOL")
mapIds(org.Hs.eg.db, c("test", NK_markers$HGNC_Symbol[1:10]), "SYMBOL","SYMBOL")
devtools::document()
devtools::check()
BiocCheck::BiocCheck()
