n <- function(...) {as.list(substitute(...))}
n(tmp, p)
n <- function(...) {structure(list(...), names = as.list(substitute(list(...)))[-1L])}
n(tmp, p)
n <- function(...) {as.list(substitute(list(...)))[-1L]}
n(tmp, p)
n <- function(...) {as.list(substitute(list(...)))}
n(tmp, p)
rm(n)
devtools::load_all()
merge_markers(msigdb_gobp_nk)
gls2gsc(geneIds(msigdb_gobp_nk[1:3]))
gls2gsc(geneIds(msigdb_gobp_nk[[1]]))
gls2gsc(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]]))
gls2gsc(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]]), geneIds(msigdb_gobp_nk3:5))
gls2gsc(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]]), geneIds(msigdb_gobp_nk[3:5]))
gls2gsc(list(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]])))
gls2gsc(list(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]])), geneIds(msigdb_gobp_nk[3:5]))
names(list(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]])), geneIds(msigdb_gobp_nk[3:5]))
c(list(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]])), geneIds(msigdb_gobp_nk[3:5]))
c(list(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]])), geneIds(msigdb_gobp_nk[3:5])) |> names()
c(list(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]])), geneIds(msigdb_gobp_nk[3:5])) |> names() |> is.null()
c(list(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]])), geneIds(msigdb_gobp_nk[3:5])) |> names()
(c(list(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]])), geneIds(msigdb_gobp_nk[3:5])) |> names()) == NULL
is.null(c(list(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]])), geneIds(msigdb_gobp_nk[3:5])) |> names())
c(list(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]])), geneIds(msigdb_gobp_nk[3:5])) |> names()
c(list(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]])), geneIds(msigdb_gobp_nk[3:5])) |> names() |> sapply(is.null)
c(list(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]])), geneIds(msigdb_gobp_nk[3:5])) |> names() |> sapply(is.null) |> ifelse(NULL, "test")
c(list(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]])), geneIds(msigdb_gobp_nk[3:5])) |> names()
which(is.null(c(list(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]])), geneIds(msigdb_gobp_nk[3:5])) |> names()))
is.null(c(list(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]])), geneIds(msigdb_gobp_nk[3:5])) |> names())
(c(list(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]])), geneIds(msigdb_gobp_nk[3:5])) |> names()) == NULL
length(c(list(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]])), geneIds(msigdb_gobp_nk[3:5])) |> names())
sapply(c(list(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]])), geneIds(msigdb_gobp_nk[3:5])) |> names(), is.null)
(c(list(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]])), geneIds(msigdb_gobp_nk[3:5])) |> names())
sapply(c(list(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]])), geneIds(msigdb_gobp_nk[3:5])) |> names(), \(x) x == "")
which(c(list(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]])), geneIds(msigdb_gobp_nk[3:5])) |> names() == "")
which(c(list(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]])), geneIds(msigdb_gobp_nk[3:5])) |> names() == "1")
devtools::load_all()
gls2gsc(list(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]])), geneIds(msigdb_gobp_nk[3:5]))
gls2gsc(geneIds(msigdb_gobp_nk[3:5]))
gls2gsc(list(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]])))
gls2gsc(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]]))
gls2gsc(geneIds(msigdb_gobp_nk[[1]]), geneIds(msigdb_gobp_nk[[2]]), geneIds(msigdb_gobp_nk[3:5]))
devtools::document()
devtools::document()
devtools::check()
get_gsc_sig(gsc = mastR::msigdb_gobp_nk,
pattern = c("NK", "T_CELL"))
get_gsc_sig(gsc = mastR::msigdb_gobp_nk,
pattern = c("T_CELL"))
get_gsc_sig(gsc = mastR::msigdb_gobp_nk,
pattern = "natural_killer_cell_mediated")
get_gsc_sig(gsc = mastR::msigdb_gobp_nk,
pattern = "natural_killer_cell_mediated",
ignore.case = TRUE)
get_gsc_sig(gsc = mastR::msigdb_gobp_nk,
pattern = c("natural_killer_cell_mediated", "T_CELL"),
ignore.case = TRUE)
"natural_killer_cell_mediated" |> toupper()
gls2gsc(NK_markers$HGNC_Symbol)
gls2gsc(NK_markers$HGNC_Symbol, geneIds(msigdb_gobp_nk[[1]]))
gls2gsc(NK_markers$HGNC_Symbol, msigdb_gobp_nk[[1]])
GeneSetCollection(list(NK_markers$HGNC_Symbol))
gls2gsc(NK_markers$HGNC_Symbol, msigdb_gobp_nk[[1]])
gls2gsc(NK_markers$HGNC_Symbol, geneIds(msigdb_gobp_nk[[1]]))
gls2gsc(NK_markers$HGNC_Symbol, geneIds(msigdb_gobp_nk[[1]])) |> merge_markers()
gls2gsc(NK_markers$HGNC_Symbol, geneIds(msigdb_gobp_nk[[1]]))
gls2gsc(NK= NK_markers$HGNC_Symbol, geneIds(msigdb_gobp_nk[[1]]))
gls2gsc(NK = NK_markers$HGNC_Symbol, geneIds(msigdb_gobp_nk[[1]]))
gls2gsc(NK = NK_markers$HGNC_Symbol, msig= geneIds(msigdb_gobp_nk[[1]]))
msigdb_gobp_nk[[1]]
msigdb_gobp_nk[[1]]@geneIds
gls2gsc(NK = NK_markers$HGNC_Symbol, msig= msigdb_gobp_nk[[1]]@geneIds)
merge_markers(msigdb_gobp_nk)
merge_markers(msigdb_gobp_nk[1:3])
merge_markers(msigdb_gobp_nk[1:3], msigdb_gobp_nk[[4]])
merge_markers(MSigDB = Msig,
PanglaoDB = Panglao))
merge_markers(MSigDB = msigdb_gobp_nk[[1]],
PanglaoDB = msigdb_gobp_nk[[2]]))
merge_markers(MSigDB = msigdb_gobp_nk[[1]],
PanglaoDB = msigdb_gobp_nk[[2]])
MSigDB = msigdb_gobp_nk[[1]] | PanglaoDB = msigdb_gobp_nk[[2]]
MSigDB = msigdb_gobp_nk[[1]] | PanglaoDB = msigdb_gobp_nk[[2]]
msigdb_gobp_nk[[1]] | msigdb_gobp_nk[[2]]
(msigdb_gobp_nk[[1]] | msigdb_gobp_nk[[2]])@geneIDs
(msigdb_gobp_nk[[1]] | msigdb_gobp_nk[[2]])@geneIds
merge_markers(NK_markers$HGNC_Symbol)
usethis::use_test("gls2gsc")
gls2gsc(geneIds(msigdb_gobp_nk[1:3]))
expect_identical(msigdb_gobp_nk[1:3], gls2gsc(geneIds(msigdb_gobp_nk[1:3])))
expect_identical(msigdb_gobp_nk[1:3] |> geneIds(), gls2gsc(geneIds(msigdb_gobp_nk[1:3])) |> geneIds())
msigdb_gobp_nk[1:3]@geneIds
msigdb_gobp_nk[[1]]@geneIds
gls2gsc(msigdb_gobp_nk[[1]]@geneIds, msigdb_gobp_nk[[2]]@geneIds)
gls2gsc(msigdb_gobp_nk[[1]]@geneIds,
msigdb_gobp_nk[[2]]@geneIds,
msigdb_gobp_nk[[3]]@geneIds)
gls2gsc(GSEABase::geneIds(msigdb_gobp_nk[1:3]))
gls2gsc(GSEABase::geneIds(msigdb_gobp_nk[1:3]), msigdb_gobp_nk[[4]])
usethis::use_test("gsc_plot")
## test on gsc
gsc_plot(msigdb_gobp_nk[1:3])
## test on gsc
p <- gsc_plot(msigdb_gobp_nk[1:3])
class(p)
is(p, "upset")
## test on gs
p <- gsc_plot(msigdb_gobp_nk[[1]], msigdb_gobp_nk[[2]])
p
## test on gs
p <- gsc_plot(msigdb_gobp_nk[[1]], msigdb_gobp_nk[[2]], msigdb_gobp_nk[3:4])
p
expect_true(is(p, "upset"))
## test on gs
merge_markers(msigdb_gobp_nk[[1]], msigdb_gobp_nk[[2]], msigdb_gobp_nk[3:4])
msigdb_gobp_nk[[1]] | msigdb_gobp_nk[[2]]
msigdb_gobp_nk[[1]] | msigdb_gobp_nk[2:3]
msigdb_gobp_nk[[1]] | msigdb_gobp_nk[2:4]
msigdb_gobp_nk |
msigdb_gobp_nk | msigdb_gobp_nk
msigdb_gobp_nk[[1]] | msigdb_gobp_nk
msigdb_gobp_nk[[1]] | msigdb_gobp_nk[2:4]
msigdb_gobp_nk[[1]]@geneIds | msigdb_gobp_nk[[2]]@geneIds
msigdb_gobp_nk[[1]] | msigdb_gobp_nk[[2]]
devtools::document()
devtools::document()
## test on gs
merge_markers(msigdb_gobp_nk[[1]], msigdb_gobp_nk[[2]], msigdb_gobp_nk[3:4])
## test on gs
setName(merge_markers(msigdb_gobp_nk[[1]], msigdb_gobp_nk[[2]], msigdb_gobp_nk[3:4]))
get_panglao_sig(type = "NK cells")
get_lm_sig(lm7.pattern = "NK", lm22.pattern = "NK cells")
get_lm_sig(lm7.pattern = "NK", lm22.pattern = "NK cells") |> gsc_plot()
merge_markers(msigdb_gobp_nk[[1]],get_lm_sig(lm7.pattern = "NK", lm22.pattern = "NK cells"))
merge_markers(msigdb_gobp_nk[[1]],get_lm_sig(lm7.pattern = "NK", lm22.pattern = "NK cells"))@longDescription |> jsonlite::fromJSON()
GeneSetCollection(msigdb_gobp_nk[[1]],get_lm_sig(lm7.pattern = "NK", lm22.pattern = "NK cells"))
GeneSetCollection(c(msigdb_gobp_nk[[1]],get_lm_sig(lm7.pattern = "NK", lm22.pattern = "NK cells")))
GeneSetCollection(c(msigdb_gobp_nk[[1]],get_lm_sig(lm7.pattern = "NK", lm22.pattern = "NK cells"))) |> gsc_plot()
devtools::document()
devtools::check()
org.Hs.eg.db::org.Hs.eg.db
org.Hs.eg.db::org.Hs.eg.db
usethis::use_package("org.Hs.eg.db", type = "Imports")
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
rm(list = ls())
devtools::load_all()
library(mastR)
library(ggplot2)
library(GSEABase)
data("im_data_6", "NK_markers", "LM22",
"LM7", "ccle_crc_5", "msigdb_gobp_nk")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(mastR)
library(ggplot2)
library(GSEABase)
data("im_data_6", "NK_markers", "LM22",
"LM7", "ccle_crc_5", "msigdb_gobp_nk")
## show what NK_markers looks like:
NK_markers
## only retrieve LM7
get_lm_sig(lm7.pattern = "^NK")
## only retrieve LM22
get_lm_sig(lm22.pattern = "NK cells")
## collect both LM7 and LM22
LM <- get_lm_sig(lm7.pattern = "NK", lm22.pattern = "NK cells")
LM
## show upset diagram
gsc_plot(LM)
## collect all "natural killer mediated" relavent genesets from MSigDB
# MSig <- get_gsc_sig(gsc = "msigdb",
#                     pattern = "NATURAL_KILLER_CELL_MEDIATED",
#                     cat = "c5", subcat = "GO:BP",
#                     version = '7.4',
#                     species = "hs")
MSig <- get_gsc_sig(gsc = msigdb_gobp_nk,
pattern = "NATURAL_KILLER_CELL_MEDIATED")
MSig
## show upset diagram of collected gene-sets
gsc_plot(MSig)
## merge all genesets into one
MSig <- merge_markers(MSig)
setName(MSig) <- "MSigDB"
## show availbable organs on PanglaoDB
list_panglao_organs()
## show available cell types of interest organ on PanglaoDB
## Number in the bracket represents the number of markers for each cell type (in both Homo and Mus).
list_panglao_types(organ = "Immune system")
## collect all "NK cells" markers from PanglaoDB website
Panglao <- get_panglao_sig(type = "NK cells")
Panglao
## number differs from 'NK cells' under list_panglao_types(organ = "Immune system"), because we only keep 'Hs' markers.
nk_m <- NK_markers$HGNC_Symbol |>
GeneSet(geneIdType = SymbolIdentifier(), setName = "NK_markers")
gsc <- GeneSetCollection(c(nk_m, LM, MSig, Panglao))
Markers <- merge_markers(gsc)
## upset plot
gsc_plot(gsc)
Markers
## to show the table summary of merged list
jsonlite::fromJSON(GSEABase::longDescription(Markers))
im_data_6
idx <- c(
"lib.size", "donorid.ch1", "smoker.ch1",
"cellcount.ch1", "collectiondate.ch1",
"celltype.ch1", "gender.ch1"
)
edgeR::DGEList(
counts = exprs(im_data_6),
samples = pData(im_data_6)
)[["samples"]][, idx]
devtools::document()
usethis::use_package("SummarizedExperiment", type = "Imports")
usethis::use_package("SingleCellExperiment", type = "Imports")
devtools::document()
data("im_data_6", "NK_markers", "LM22",
"LM7", "ccle_crc_5", "msigdb_gobp_nk")
## show what NK_markers looks like:
NK_markers
## only retrieve LM7
get_lm_sig(lm7.pattern = "^NK")
## only retrieve LM22
get_lm_sig(lm22.pattern = "NK cells")
## collect both LM7 and LM22
LM <- get_lm_sig(lm7.pattern = "NK", lm22.pattern = "NK cells")
LM
## show upset diagram
gsc_plot(LM)
## collect all "natural killer mediated" relavent genesets from MSigDB
# MSig <- get_gsc_sig(gsc = "msigdb",
#                     pattern = "NATURAL_KILLER_CELL_MEDIATED",
#                     cat = "c5", subcat = "GO:BP",
#                     version = '7.4',
#                     species = "hs")
MSig <- get_gsc_sig(gsc = msigdb_gobp_nk,
pattern = "NATURAL_KILLER_CELL_MEDIATED")
MSig
## show upset diagram of collected gene-sets
gsc_plot(MSig)
## merge all genesets into one
MSig <- merge_markers(MSig)
setName(MSig) <- "MSigDB"
MSig
setName(MSig)
library(GSEABase)
setName(MSig) <- "MSigDB"
## collect all "natural killer mediated" relavent genesets from MSigDB
# MSig <- get_gsc_sig(gsc = "msigdb",
#                     pattern = "NATURAL_KILLER_CELL_MEDIATED",
#                     cat = "c5", subcat = "GO:BP",
#                     version = '7.4',
#                     species = "hs")
MSig <- get_gsc_sig(gsc = msigdb_gobp_nk,
pattern = "NATURAL_KILLER_CELL_MEDIATED")
MSig
## show upset diagram of collected gene-sets
gsc_plot(MSig)
## merge all genesets into one
MSig <- merge_markers(MSig)
setName(MSig) <- "MSigDB"
## show availbable organs on PanglaoDB
list_panglao_organs()
## show available cell types of interest organ on PanglaoDB
## Number in the bracket represents the number of markers for each cell type (in both Homo and Mus).
list_panglao_types(organ = "Immune system")
## collect all "NK cells" markers from PanglaoDB website
Panglao <- get_panglao_sig(type = "NK cells")
Panglao
## number differs from 'NK cells' under list_panglao_types(organ = "Immune system"), because we only keep 'Hs' markers.
nk_m <- NK_markers$HGNC_Symbol |>
GeneSet(geneIdType = SymbolIdentifier(), setName = "NK_markers")
gsc <- GeneSetCollection(c(nk_m, LM, MSig, Panglao))
Markers <- merge_markers(gsc)
## upset plot
gsc_plot(gsc)
Markers
## to show the table summary of merged list
jsonlite::fromJSON(GSEABase::longDescription(Markers))
devtools::check()
c(nk_m, LM, MSig, Panglao)
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
library(mastR)
library(ggplot2)
library(GSEABase)
data("im_data_6", "NK_markers", "LM22",
"LM7", "ccle_crc_5", "msigdb_gobp_nk")
## show what NK_markers looks like:
NK_markers
## only retrieve LM7
get_lm_sig(lm7.pattern = "^NK")
## only retrieve LM22
get_lm_sig(lm22.pattern = "NK cells")
## collect both LM7 and LM22
LM <- get_lm_sig(lm7.pattern = "NK", lm22.pattern = "NK cells")
LM
## show upset diagram
gsc_plot(LM)
## collect all "natural killer mediated" relavent genesets from MSigDB
# MSig <- get_gsc_sig(gsc = "msigdb",
#                     pattern = "NATURAL_KILLER_CELL_MEDIATED",
#                     cat = "c5", subcat = "GO:BP",
#                     version = '7.4',
#                     species = "hs")
MSig <- get_gsc_sig(gsc = msigdb_gobp_nk,
pattern = "NATURAL_KILLER_CELL_MEDIATED")
MSig
## show upset diagram of collected gene-sets
gsc_plot(MSig)
## merge all genesets into one
MSig <- merge_markers(MSig)
setName(MSig) <- "MSigDB"
devtools::load_all()
get_lm_sig(lm7.pattern = "^NK")
## only retrieve LM22
get_lm_sig(lm22.pattern = "NK cells")
## collect both LM7 and LM22
LM <- get_lm_sig(lm7.pattern = "NK", lm22.pattern = "NK cells")
LM
## show upset diagram
gsc_plot(LM)
MSig <- get_gsc_sig(gsc = msigdb_gobp_nk,
pattern = "NATURAL_KILLER_CELL_MEDIATED")
MSig
## show upset diagram of collected gene-sets
gsc_plot(MSig)
## merge all genesets into one
MSig <- merge_markers(MSig)
setName(MSig) <- "MSigDB"
library(GSEABase)
MSig <- get_gsc_sig(gsc = msigdb_gobp_nk,
pattern = "NATURAL_KILLER_CELL_MEDIATED")
MSig
## show upset diagram of collected gene-sets
gsc_plot(MSig)
## merge all genesets into one
MSig <- merge_markers(MSig)
setName(MSig) <- "MSigDB"
list_panglao_organs()
## show available cell types of interest organ on PanglaoDB
## Number in the bracket represents the number of markers for each cell type (in both Homo and Mus).
list_panglao_types(organ = "Immune system")
## collect all "NK cells" markers from PanglaoDB website
Panglao <- get_panglao_sig(type = "NK cells")
Panglao
nk_m <- NK_markers$HGNC_Symbol |>
GeneSet(geneIdType = SymbolIdentifier(), setName = "NK_markers")
gsc <- GeneSetCollection(c(nk_m, LM, MSig, Panglao))
Markers <- merge_markers(gsc)
## upset plot
gsc_plot(gsc)
Markers
## to show the table summary of merged list
jsonlite::fromJSON(GSEABase::longDescription(Markers))
devtools::check()
BiocCheck::BiocCheck()
devtools::check()
devtools::document()
devtools::load_all()
BiocCheck::BiocCheck()
testthat::test_check()
testthat::test_check(".")
testthat::test_check()
devtools::test()
get_gsc_sig(
gsc = msigdb_gobp_nk,
pattern = "natural_killer_cell_mediated",
ignore.case = TRUE
)
gls2gsc(NK_markers$HGNC_Symbol, msigdb_gobp_nk[[1]]@geneIds)
gls2gsc(NK_markers$HGNC_Symbol, msigdb_gobp_nk[1] |> geneIds())
gls2gsc(NK_markers$HGNC_Symbol, msigdb_gobp_nk[1:3] |> geneIds())
merge_markers(msigdb_gobp_nk)
GSEABase::geneIds(msigdb_gobp_nk) |>
Reduce(f = union)
merge_markers(msigdb_gobp_nk[[1]],
msigdb_gobp_nk[[2]])
GSEABase::geneIds(msigdb_gobp_nk) |>
Reduce(f = union)
(msigdb_gobp_nk[[1]] | msigdb_gobp_nk[[2]])@geneIds
GSEABase::geneIds(msigdb_gobp_nk[1:2]) |> union()
GSEABase::geneIds(msigdb_gobp_nk[1:2]) |> Reduce(f = union)
merge_markers(msigdb_gobp_nk[[1]], msigdb_gobp_nk[2:3])
GSEABase::geneIds(msigdb_gobp_nk[1:3]) |> Reduce(f = union)
merge_markers(msigdb_gobp_nk[[1]]@geneIds)
devtools::document()
devtools::test()
devtools::run_examples()
devtools::check()
devtools::install()
devtools::check()
library(mastR)
library(mastR)
library(ggplot2)
library(GSEABase)
data("im_data_6", "NK_markers", "LM22",
"LM7", "ccle_crc_5", "msigdb_gobp_nk")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(mastR)
library(ggplot2)
library(GSEABase)
data("im_data_6", "NK_markers", "LM22",
"LM7", "ccle_crc_5", "msigdb_gobp_nk")
## show what NK_markers looks like:
NK_markers
## only retrieve LM7
get_lm_sig(lm7.pattern = "^NK")
## only retrieve LM22
get_lm_sig(lm22.pattern = "NK cells")
## collect both LM7 and LM22
LM <- get_lm_sig(lm7.pattern = "NK", lm22.pattern = "NK cells")
LM
## show upset diagram
gsc_plot(LM)
## collect all "natural killer mediated" relavent genesets from MSigDB
# MSig <- get_gsc_sig(gsc = "msigdb",
#                     pattern = "NATURAL_KILLER_CELL_MEDIATED",
#                     cat = "c5", subcat = "GO:BP",
#                     version = '7.4',
#                     species = "hs")
MSig <- get_gsc_sig(gsc = msigdb_gobp_nk,
pattern = "NATURAL_KILLER_CELL_MEDIATED")
MSig
## show upset diagram of collected gene-sets
gsc_plot(MSig)
## merge all genesets into one
MSig <- merge_markers(MSig)
setName(MSig) <- "MSigDB"
## show availbable organs on PanglaoDB
list_panglao_organs()
## show available cell types of interest organ on PanglaoDB
## Number in the bracket represents the number of markers for each cell type (in both Homo and Mus).
list_panglao_types(organ = "Immune system")
## collect all "NK cells" markers from PanglaoDB website
Panglao <- get_panglao_sig(type = "NK cells")
Panglao
## number differs from 'NK cells' under list_panglao_types(organ = "Immune system"), because we only keep 'Hs' markers.
nk_m <- NK_markers$HGNC_Symbol |>
GeneSet(geneIdType = SymbolIdentifier(), setName = "NK_markers")
gsc <- GeneSetCollection(c(nk_m, LM, MSig, Panglao))
Markers <- merge_markers(gsc)
## upset plot
gsc_plot(gsc)
Markers
## to show the table summary of merged list
jsonlite::fromJSON(GSEABase::longDescription(Markers))
devtools::check()
.Last.error
devtools::check()
gsc_plot(msigdb_gobp_nk[1:3])
gsc_plot(msigdb_gobp_nk[[1]], msigdb_gobp_nk[[2]])
gsc_plot(msigdb_gobp_nk[[1]], msigdb_gobp_nk[[2]], msigdb_gobp_nk[3:4])
get_gsc_sig(gsc = mastR::msigdb_gobp_nk,
pattern = "natural_killer_cell_mediated",
ignore.case = TRUE)
get_gsc_sig(gsc = mastR::msigdb_gobp_nk,
pattern = "natural_killer_cell_mediated")
get_gsc_sig(gsc = mastR::msigdb_gobp_nk,
pattern = c("NATURAL_KILLER_CELL_MEDIATED",
"T_CELL"))
get_gsc_sig(gsc = mastR::msigdb_gobp_nk,
pattern = "natural_killer_cell_mediated",
ignore.case = TRUE)
usethis::use_package("UpSetR", type = "Suggests")
usethis::use_package("UpSetR", type = "Suggests")
devtools::document()
devtools::test()
devtools::check()
BiocCheck::BiocCheck()
get_gsc_sig(gsc = mastR::msigdb_gobp_nk,
pattern = "natural_killer_cell_mediated",
ignore.case = TRUE)
devtools::load_all()
get_gsc_sig(gsc = mastR::msigdb_gobp_nk,
pattern = "natural_killer_cell_mediated",
ignore.case = TRUE)
MSig <- get_gsc_sig(gsc = mastR::msigdb_gobp_nk,
pattern = "natural_killer_cell_mediated",
ignore.case = TRUE)
expect_s4_class(MSig, "GeneSetCollection")
expect_s4_class(MSig, "GeneSetCollection")
expect_error(get_gsc_sig(gsc = mastR::msigdb_gobp_nk,
pattern = "natural_killer_cell_mediated"))
get_gsc_sig(gsc = mastR::msigdb_gobp_nk,
pattern = "natural_killer_cell_mediated")
expect_warning(get_gsc_sig(gsc = mastR::msigdb_gobp_nk,
pattern = c("NATURAL_KILLER_CELL_MEDIATED",
"T_CELL")))
get_gsc_sig(gsc = mastR::msigdb_gobp_nk,
pattern = c("NATURAL_KILLER_CELL_MEDIATED",
"T_CELL"))
p <- gsc_plot(msigdb_gobp_nk[1:3])
expect_true(is(p, "upset"))
## test on gs
p <- gsc_plot(msigdb_gobp_nk[[1]], msigdb_gobp_nk[[2]])
expect_true(is(p, "upset"))
## test on mixed gs and gsc
p <- gsc_plot(msigdb_gobp_nk[[1]], msigdb_gobp_nk[[2]], msigdb_gobp_nk[3:4])
expect_true(is(p, "upset"))
