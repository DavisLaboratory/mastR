## if we choose 'union' or 'intersect' as combination
setequal(m_ct_m, m_ct)
## As a test, we just repeatly use im_data_6 as a show case
m_ct_m <- filter_subset_sig(
data = list(A = im_data_6, B = im_data_6),
markers = geneIds(Markers),
group_col = "celltype:ch1",
target_group = "NK",
gene_id = "ENSEMBL"
)
## As a test, we just repeatly use im_data_6 as a show case
m_ct_m <- filter_subset_sig(
data = list(A = im_data_6, B = im_data_6),
markers = geneIds(Markers),
group_col = "celltype:ch1",
target_group = "NK",
gene_id = "ENSEMBL"
)
## we will get exactly the same list
## if we choose 'union' or 'intersect' as combination
setequal(m_ct_m, m_ct)
set.seed(123)
m_ct_m <- filter_subset_sig(
data = list(A = im_data_6, B = im_data_6),
markers = geneIds(Markers),
group_col = "celltype:ch1",
target_group = "NK",
gene_id = "ENSEMBL",
comb = "RRA",  ## change this to use different strategy, default is "union"
s_thres = 0.5  ## only work when comb = "RRA", set a threshold for ranking score
)
## we can get only 8 signature genes this time
m_ct_m
## create a test scRNA object of 100 genes x 100 cells
counts <- matrix(abs(rnorm(10000, 10, 10)), 100)
rownames(counts) <- 1:100
colnames(counts) <- 1:100
meta <- data.frame(
subset = rep(c("A", "B"), 50),
level = rep(1:4, each = 25)
)
rownames(meta) <- 1:100
pb <- pseudo_samples(counts, by = meta)
## Seurat or SCE object are also accepted
# scRNA <- Seurat::CreateSeuratObject(counts = counts, meta.data = meta)
# pseudo_samples(scRNA, by = c("subset","level"))
pb
pb
pb <- edgeR::DGEList(
counts = pb,
group = gsub("\\..*", "", colnames(pb)))
pb
filter_subset_sig(pb, group_col = "group", target_group = "A")
filter_subset_sig(pb, group_col = "group", target_group = "A", normalize = F)
filter_subset_sig(pb, group_col = "group", target_group = "A")
pb
## create a test scRNA object of 100 genes x 100 cells
counts <- matrix(abs(rpois(10000, 10)), 100)
rownames(counts) <- 1:100
colnames(counts) <- 1:100
meta <- data.frame(
subset = rep(c("A", "B"), 50),
level = rep(1:4, each = 25)
)
rownames(meta) <- 1:100
pb <- pseudo_samples(counts, by = meta)
pb <- edgeR::DGEList(counts = pb, group = gsub("\\..*", "", colnames(pb)))
## Seurat or SCE object are also accepted
# scRNA <- Seurat::CreateSeuratObject(counts = counts, meta.data = meta)
# pseudo_samples(scRNA, by = c("subset","level"))
pb
filter_subset_sig(pb, group_col = "group", target_group = "A")
devtools::document()
devtools::check()
devtools::check()
BiocCheck::BiocCheck()
devtools::document()
pkgload::dev_help('filter_subset_sig')
BiocCheck::BiocCheck()
devtools::document()
devtools::check()
BiocCheck::BiocCheck()
devtools::check()
BiocCheck::BiocCheck()
devtools::load_all()
library(splatter)
## set seed for reproduce as there's permutation inside
set.seed(123)
sim_params <- newSplatParams(
nGenes = 1000,
batchCells = 3000,
group.prob = seq(0.1, 0.4, length.out = 4),
de.prob = 0.02,
# de.downProb = 0,  ## only set up-regulated genes for each group
de.facLoc = 0.5,
de.facScale = 0.4
)
data_sim <- splatSimulate(sim_params, method = "groups")
markers_list <- rowData(data_sim)[,paste0("DEFacGroup", 1:4)] |>
lapply(\(x) rownames(data_sim[x > 1]))
## aggregate into pseudo-bulk samples
pb <- pseudo_samples(data_sim,
by = c("Batch", "Group"),
min.cells = 50, max.cells = 100)
dge <- DGEList(
counts = pb,
samples = data.frame(group = gsub(".*\\.(.*)_.*", "\\1",colnames(pb)),
Batch = gsub("(.*)\\..*", "\\1",colnames(pb)),
sampleID = gsub("(.*)_.*", "\\1",colnames(pb)))
)
View(dge)
dge
table(dge$samples$group)
paste0("Group", 1:5)
sig_ls <- lapply(paste0("Group", 1:4), \(x) {
filter_subset_sig(
data = dge,
markers = NULL,
ID = "group",
type = x,
lfc = 0,
method = "Group",
assemble = "intersect"  ## get intersected DEGs across all comparisons
)
}) |> setNames(paste0("Group", 1:4))
sig_ls <- lapply(paste0("Group", 1:4), \(x) {
filter_subset_sig(
data = dge,
markers = NULL,
group_col = "group",
target_group = x,
lfc = 0,
method = "Group",
assemble = "intersect"  ## get intersected DEGs across all comparisons
)
}) |> setNames(paste0("Group", 1:4))
View(sig_ls)
set.seed(123)
sig_ls <- lapply(paste0("Group", 1:4), \(x) {
filter_subset_sig(
data = dge,
markers = NULL,
group_col = "group",
target_group = x,
lfc = 0,
method = "Group",
assemble = "intersect"  ## get intersected DEGs across all comparisons
)
}) |> setNames(paste0("Group", 1:4))
sig_ls
set.seed(123)
sig_ls <- lapply(paste0("Group", 1:4), \(x) {
filter_subset_sig(
data = dge,
markers = NULL,
group_col = "group",
target_group = x,
lfc = 0,
feature_selection = "none",
assemble = "intersect"  ## get intersected DEGs across all comparisons
)
}) |> setNames(paste0("Group", 1:4))
sig_ls
set.seed(123)
sig_ls <- lapply(paste0("Group", 1:4), \(x) {
filter_subset_sig(
data = dge,
markers = NULL,
group_col = "group",
target_group = x,
lfc = 0,
assemble = "intersect"  ## get intersected DEGs across all comparisons
)
}) |> setNames(paste0("Group", 1:4))
sig_ls
set.seed(123)
sig_ls <- lapply(paste0("Group", 1:4), \(x) {
filter_subset_sig(
data = dge,
markers = NULL,
group_col = "group",
target_group = x,
lfc = 0, feature_selection = "rankproduct",
assemble = "intersect"  ## get intersected DEGs across all comparisons
)
}) |> setNames(paste0("Group", 1:4))
sig_ls
set.seed(123)
sig_ls <- lapply(paste0("Group", 1:4), \(x) {
filter_subset_sig(
data = dge,
markers = NULL,
group_col = "group",
target_group = x,
lfc = 0,
assemble = "intersect"  ## get intersected DEGs across all comparisons
)
}) |> setNames(paste0("Group", 1:4))
sig_ls
markers_list
p <- lapply(1:4, \(i) ggvenn::ggvenn(list(sig = sig_ls[[i]],
marker = markers_list[[i]])))
patchwork::wrap_plots(p)
patchwork::wrap_plots(p)
patchwork::wrap_plots(p)
p <- lapply(1:4, \(i) ggvenn::ggvenn(list(sig = sig_ls[[i]],
marker = markers_list[[i]]),
show_percentage = FALSE))
patchwork::wrap_plots(p)
patchwork::wrap_plots(p)
patchwork::wrap_plots(p)
p <- lapply(1:4, \(i) ggvenn::ggvenn(list(sig = sig_ls[[i]],
marker = markers_list[[i]]),
show_percentage = FALSE) +
ggtitle(names(sig_ls)[i]))
patchwork::wrap_plots(p)
ncol(data_sim)
data_sim$rand_idx <- sample.int(300, ncol(data_sim), replace = TRUE)
table(data_sim$rand_idx)
data_sim$rand_idx <- sample.int(30, ncol(data_sim), replace = TRUE)
table(data_sim$rand_idx)
table(data_sim$rand_idx) |> sort()
data_sim$Group[data_sim$rand_idx == 1] |> table()
(data_sim$Group[data_sim$rand_idx == 1] |> table())/88
## randomly generate aggregating idx
set.seed(123)
data_sim$rand_idx <- sample.int(30, ncol(data_sim), replace = TRUE)
## aggregate into pseudo-bulk samples based on rand_idx
pb_r <- pseudo_samples(data_sim,
by = c("Batch", "rand_idx"),
min.cells = 50, max.cells = 100)
dge_r <- DGEList(
counts = pb_r,
samples = data.frame(group = gsub(".*\\.(.*)_.*", "\\1",colnames(pb_r)),
Batch = gsub("(.*)\\..*", "\\1",colnames(pb_r)),
sampleID = gsub("(.*)_.*", "\\1",colnames(pb_r)))
)
table(dge_r$samples$group)
table(dge_r$samples$sampleID)
## randomly generate aggregating idx
set.seed(123)
data_sim$rand_idx <- sample.int(30, ncol(data_sim), replace = TRUE)
## aggregate into pseudo-bulk samples based on rand_idx
pb_r <- pseudo_samples(data_sim,
by = c("Batch", "rand_idx"))
dge_r <- DGEList(
counts = pb_r,
samples = data.frame(group = gsub(".*\\.(.*)_.*", "\\1",colnames(pb_r)),
Batch = gsub("(.*)\\..*", "\\1",colnames(pb_r)),
sampleID = gsub("(.*)_.*", "\\1",colnames(pb_r)))
)
colnames(pb_r)
group_by(data_sim@colData, rand_idx)
data_sim@colData |> class()
colData(data_sim) |> class()
as.data.frame(data_sim@colData) |> group_by(rand_idx)
as.data.frame(data_sim@colData) |> group_by(rand_idx, Group)
as.data.frame(data_sim@colData) |> group_by(rand_idx, Group) |> summarise(count = n())
as.data.frame(data_sim@colData) |> group_by(rand_idx, Group) |> summarise(count = n(Group))
as.data.frame(data_sim@colData) |> group_by(rand_idx, Group) |> summarise(count = n())
as.data.frame(data_sim@colData) |> group_by(rand_idx, Group) |> summarise(count = n()) |> pivot_wider(-rand_idx, names_from = Group, values_from = count)
as.data.frame(data_sim@colData) |> group_by(rand_idx, Group) |> summarise(count = n()) |> pivot_wider(Group, count, names_from = Group, values_from = count)
as.data.frame(data_sim@colData) |> group_by(rand_idx, Group) |> summarise(count = n()) |> pivot_wider(Group, count, names_from = "Group", values_from = "count")
as.data.frame(data_sim@colData) |> group_by(rand_idx, Group) |> summarise(count = n()) |> pivot_wider(-rand_idx, names_from = Group, values_from = count)
as.data.frame(data_sim@colData) |> group_by(rand_idx, Group) |> summarise(count = n()) |> ungroup() |> pivot_wider(-rand_idx, names_from = Group, values_from = count)
as.data.frame(data_sim@colData) |> group_by(rand_idx, Group) |> summarise(count = n()) |> pivot_wider(names_from = Group, values_from = count)
as.data.frame(data_sim@colData) |> group_by(rand_idx, Group) |> summarise(count = n()) |> pivot_wider(names_from = Group, values_from = count)
dge$samples$group
dge_r$samples$group
as.data.frame(data_sim@colData) |> group_by(rand_idx, Group) |> summarise(count = n()) |> pivot_wider(names_from = Group, values_from = count) |> right_join(dge_r$samples, by = c("rand_idx" = "group"))
as.data.frame(data_sim@colData) |>
group_by(rand_idx, Group) |>
summarise(count = n()) |>
pivot_wider(names_from = Group, values_from = count) |>
mutate(rand_idx = factor(rand_idx))
as.data.frame(data_sim@colData) |>
group_by(rand_idx, Group) |>
summarise(count = n()) |>
pivot_wider(names_from = Group, values_from = count) |>
mutate(rand_idx = factor(rand_idx)) |> right_join(dge_r$samples, by = c("rand_idx" = "group"))
as.data.frame(data_sim@colData) |>
group_by(rand_idx, Group) |>
summarise(count = n()) |>
pivot_wider(names_from = Group, values_from = count) |>
mutate(rand_idx = factor(rand_idx)) |> left_join(dge_r$samples, by = c("rand_idx" = "group"))
as.data.frame(data_sim@colData) |>
group_by(rand_idx, Group) |>
summarise(count = n()) |>
pivot_wider(names_from = Group, values_from = count) |>
mutate(rand_idx = factor(rand_idx)) |> inner_join(dge_r$samples, by = c("rand_idx" = "group"))
as.data.frame(data_sim@colData) |>
group_by(rand_idx, Group) |>
summarise(count = n()) |>
pivot_wider(names_from = Group, values_from = count) |>
mutate(rand_idx = factor(rand_idx)) |> left_join(dge_r$samples, by = c("group" = "rand_idx"))
tmp <- as.data.frame(data_sim@colData) |>
group_by(rand_idx, Group) |>
summarise(count = n()) |>
pivot_wider(names_from = Group, values_from = count) |>
mutate(rand_idx = factor(rand_idx))
dge_r$samples <- left_join(dge_r$samples, tmp, by = c("group" = "rand_idx"))
dge_r$samples
tmp$rand_idx
dge_r$samples |> dim()
dge_r$samples[,6:9]
dge_r$samples[,6:9] |> rowSums()
dge_r$samples[,6:9] / rowSums(dge_r$samples[,6:9])
signif(dge_r$samples[,6:9] / rowSums(dge_r$samples[,6:9]), 2)
tmp[,-1]
tmp[,-1] <- signif(tmp[,-1] / rowSums(tmp[,-1]), 2)
## randomly generate aggregating idx
set.seed(123)
data_sim$rand_idx <- sample.int(30, ncol(data_sim), replace = TRUE)
## aggregate into pseudo-bulk samples based on rand_idx
pb_r <- pseudo_samples(data_sim, by = c("Batch", "rand_idx"))
dge_r <- DGEList(
counts = pb_r,
samples = data.frame(group = gsub(".*\\.(.*)_.*", "\\1",colnames(pb_r)),
Batch = gsub("(.*)\\..*", "\\1",colnames(pb_r)),
sampleID = gsub("(.*)_.*", "\\1",colnames(pb_r)))
)
## append cellular composition
tmp <- as.data.frame(data_sim@colData) |>
group_by(rand_idx, Group) |>
summarise(count = n()) |>
pivot_wider(names_from = Group, values_from = count) |>
mutate(rand_idx = factor(rand_idx))
tmp[,-1] <- signif(tmp[,-1] / rowSums(tmp[,-1]), 2)
dge_r$samples <- left_join(dge_r$samples, tmp, by = c("group" = "rand_idx"))
dge_r$samples
filterByExpr(dge_r)
filterByExpr(dge_r) |> table()
filterByExpr(dge_r, group = dge_r$samples$group) |> table()
## randomly generate aggregating idx
set.seed(123)
data_sim$rand_idx <- sample.int(30, ncol(data_sim), replace = TRUE)
## aggregate into pseudo-bulk samples based on rand_idx
pb_r <- pseudo_samples(data_sim, by = c("Batch", "rand_idx"))
dge_r <- DGEList(
counts = pb_r,
samples = data.frame(group = gsub(".*\\.(.*)_.*", "\\1",colnames(pb_r)),
Batch = gsub("(.*)\\..*", "\\1",colnames(pb_r)),
sampleID = gsub("(.*)_.*", "\\1",colnames(pb_r)))
)
## append cellular composition
tmp <- as.data.frame(data_sim@colData) |>
group_by(rand_idx, Group) |>
summarise(count = n()) |>
pivot_wider(names_from = Group, values_from = count) |>
mutate(rand_idx = factor(rand_idx))
tmp[,-1] <- signif(tmp[,-1] / rowSums(tmp[,-1]), 2)
dge_r$samples <- left_join(dge_r$samples, tmp, by = c("group" = "rand_idx"))
## data process
keep <- filterByExpr(dge_r)
dge_r <- dge_r[keep,, keep.lib.sizes = FALSE]
dge_r <- calcNormFactors(dge_r, method = "TMM")
dge_r
cpm(dge_r, log = TRUE)
edgeR::cpm(dge_r, log = TRUE)
sig_ls
library(singscore)
rank_data <- rankGenes(edgeR::cpm(dge_r, log = TRUE))
scores <- multiScore(rank_data, upSetColc = sig_ls)
gls2gsc(sig_ls)
library(singscore)
rank_data <- rankGenes(edgeR::cpm(dge_r, log = TRUE))
scores <- multiScore(rank_data, upSetColc = gls2gsc(sig_ls))
scores
t(scores)
scores |> class()
scores$Dispersions
scores$Scores
scores$Scores |> t()
scores$Scores |> t() |> head()
dge_r$samples$Group4
scores$Scores |> t() |> pivot_longer(everything(), names_to = "Group", values_to = "Score")
scores$Scores |> t() |> as.data.frame() |> pivot_longer(everything(), names_to = "Group", values_to = "Score")
scores$Scores |> t() |> as.data.frame() |> tibble::rownames_to_column("Sample") |> pivot_longer(-Sample, names_to = "Group", values_to = "Score")
dge_r$samples[,6:9]
dge_r$samples
cbind(Sample = colnames(dge_r), dge_r$samples[,6:9])
cbind(Sample = colnames(dge_r), dge_r$samples[,6:9]) |>
pivot_longer(-Sample, names_to = "Group", values_to = "Prop")
```
cbind(Sample = colnames(dge_r), dge_r$samples[,6:9]) |>
pivot_longer(-Sample)
cbind(Sample = colnames(dge_r), dge_r$samples[,6:9]) |>
pivot_longer(-Sample, names_to = "Group")
cbind(Sample = colnames(dge_r), dge_r$samples[,6:9]) |>
pivot_longer(-Sample, names_to = "Group", values_to = "Prop")
cbind(Sample = colnames(dge_r), dge_r$samples[,6:9]) |>
pivot_longer(-Sample, names_to = "Group", values_to = "Prop")
t(scores)
t(scores$Scores)
scores
colnames(scores)
colnames(scores$Scores)
t(scores$Scores) |> data.frame(Sample = colnames(scores$Scores))
t(scores$Scores) |> data.frame(Sample = colnames(scores$Scores)) |> pivot_longer(-Sample, names_to = "Group", values_to = "Score")
tmp <- cbind(Sample = colnames(dge_r), dge_r$samples[,6:9]) |>
pivot_longer(-Sample, names_to = "Group", values_to = "Prop")
tmp
t(scores$Scores) |> data.frame(Sample = colnames(scores$Scores)) |> pivot_longer(-Sample, names_to = "Group", values_to = "Score") |> left_join(tmp)
tmp
t(scores$Scores) |> data.frame(Sample = colnames(scores$Scores)) |> pivot_longer(-Sample, names_to = "Group", values_to = "Score") |> left_join(tmp)
tmp <- cbind(Sample = colnames(dge_r), dge_r$samples[,6:9]) |>
pivot_longer(-Sample, names_to = "Group", values_to = "Prop")
tmp
t(scores$Scores) |> data.frame(Sample = colnames(scores$Scores)) |> pivot_longer(-Sample, names_to = "Group", values_to = "Score")
t(scores$Scores) |> data.frame(Sample = colnames(scores$Scores)) |> pivot_longer(-Sample, names_to = "Group", values_to = "Score") |> left_join(tmp)
tmp
t(scores$Scores) |> data.frame(Sample = colnames(scores$Scores)) |> pivot_longer(-Sample, names_to = "Group", values_to = "Score")
t(scores$Scores) |> data.frame(Sample = colnames(scores$Scores)) |> pivot_longer(-Sample, names_to = "Group", values_to = "Score") |> left_join(tmp)
tmp <- t(scores$Scores) |>
data.frame(Sample = colnames(scores$Scores)) |>
pivot_longer(-Sample, names_to = "Group", values_to = "Score") |>
left_join(tmp)
tmp
ggplot(tmp, aes(x = Prop, y = Score, col = Group)) +
geom_point() +
theme_classic()
ggplot(tmp, aes(x = Prop, y = Score, col = Group)) +
geom_point() +
facet_wrap(Group) +
theme_classic()
ggplot(tmp, aes(x = Prop, y = Score, col = Group)) +
geom_point() +
facet_wrap(~Group, scales = "free") +
theme_classic()
ggplot(tmp, aes(x = Prop, y = Score, col = Group)) +
geom_point() +
facet_wrap(~Group, scales = "free") +
ggpubr::stat_cor() +
theme_classic()
ggplot(tmp, aes(x = Prop, y = Score, col = Group)) +
geom_point() +
facet_wrap(~Group, scales = "free") +
ggpubr::stat_cor(method = "spearman") +
theme_classic()
ggplot(tmp, aes(x = Prop, y = Score, col = Group)) +
geom_point() +
facet_wrap(~Group, scales = "free") +
ggpubr::stat_cor() +
theme_classic()
ggplot(tmp, aes(x = Prop, y = Score, col = Group)) +
geom_point() +
facet_wrap(~Group, scales = "free") +
ggpubr::stat_cor(position = "lefttop") +
theme_classic()
ggplot(tmp, aes(x = Prop, y = Score, col = Group)) +
geom_point() +
facet_wrap(~Group, scales = "free") +
ggpubr::stat_cor(position = "topleft") +
theme_classic()
ggplot(tmp, aes(x = Prop, y = Score, col = Group)) +
geom_point() +
facet_wrap(~Group, scales = "free") +
ggpubr::stat_cor() +
theme_classic()
update.packages()
update.packages(ask = F)
devtools::document()
devtools::document()
devtools::check()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
devtools::load_all()
sig_matrix
sig_matrix <- DWLS::buildSignatureMatrixUsingSeurat(
scdata = data, id = ID, path = path, ...
)
sig_ls
sig_ls |> unlist()
sig_ls |> unlist() |> unique()
sig_matrix <- DWLS::buildSignatureMatrixMAST(scdata = data_sim[unique(unlist(sig_ls)),], id = "Group")
sig_matrix <- DWLS::buildSignatureMatrixMAST(scdata = data_sim@assays$counts[unique(unlist(sig_ls)),], id = data_sim$Group)
sig_matrix <- DWLS::buildSignatureMatrixMAST(scdata = data_sim@assays@data$counts[unique(unlist(sig_ls)),], id = data_sim$Group)
sig_matrix
sig_matrix <- DWLS::buildSignatureMatrixMAST(scdata = data_sim@assays@data$counts[unique(unlist(sig_ls)),], id = data_sim$Group, path = NULL)
sig_matrix <- DWLS::buildSignatureMatrixMAST(scdata = data_sim@assays@data$counts[unique(unlist(sig_ls)),], id = data_sim$Group, path = tempdir())
sig_matrix
sig_matrix |> dim()
DWLS::trimData(sig_matrix, data_sim@assays@data$counts[unique(unlist(sig_ls)),])
DWLS::solveDampenedWLS(sig_matrix, data_sim@assays@data$counts[unique(unlist(sig_ls)),])
DWLS::trimData(sig_matrix, data_sim@assays@data$counts[unique(unlist(sig_ls)),])
data_sim@assays@data$counts[unique(unlist(sig_ls)),]
data_sim@assays@data$counts[unique(unlist(sig_ls)),] |> dim()
data_sim@assays@data$counts[unique(unlist(sig_ls)),1:5]
sig_matrix
source("/stornext/Bioinf/data/lab_davis/chen.j/CIBERSORT/CIBERSORT/CIBERSORT.R", echo=TRUE)
detach(unload = "package:DWLS")
detach("package:DWLS", unload = T)
detach("packages:DWLS", unload = T)
detach("package:DWLS", unload = T)
detach("package:e107", unload = T)
detach("package:e1071", unload = T)
source("/stornext/Bioinf/data/lab_davis/chen.j/CIBERSORT/CIBERSORT/CIBERSORT.R", echo=TRUE)
unloadNamespace("e1071")
detach("DWLS", unload = T)
detach("package:DWLS", unload = T)
detach(package:DWLS, unload = T)
detach("package:DWLS", unload = T, character.only = T)
detach(package:DWLS)
devtools::unload("DWLS")
source("/stornext/Bioinf/data/lab_davis/chen.j/CIBERSORT/CIBERSORT/CIBERSORT.R", echo=TRUE)
CIBERSORT(sig_matrix = sig_matrix, mixture_file = pb_r)->cell_prop
source("/stornext/Bioinf/data/lab_davis/chen.j/CIBERSORT/CIBERSORT/CIBERSORT.R", echo=TRUE)
CIBERSORT(sig_matrix = sig_matrix, mixture_file = pb_r)->cell_prop
pb_r
pb_r |> as.data.frame()
CIBERSORT(sig_matrix = sig_matrix, mixture_file = pb_r |> as.data.frame())->cell_prop
devtools::document()
